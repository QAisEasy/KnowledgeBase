{
  "id": "1.1.0.2",
  "title": "Тестировщик vs Разработчик - разные взгляды на продукт",
  "questions": [
    {
      "id": "1.1.0.2.1",
      "question": "Что такое 'Happy Path' в контексте разработки?",
      "options": [
        {"text": "Путь карьерного роста разработчика"},
        {"text": "Сценарий, когда всё работает правильно и пользователь делает ожидаемые действия"},
        {"text": "Методология разработки для создания позитивных продуктов"},
        {"text": "Самый быстрый способ выполнения задачи"}
      ],
      "correctAnswer": 1,
      "explanations": [
        {
          "correct": "Неверно. Happy Path не связан с карьерой, это термин из тестирования сценариев.",
          "incorrect": "Неверно. Happy Path не связан с карьерой, это термин из тестирования сценариев."
        },
        {
          "correct": "Правильно! Happy Path - это идеальный сценарий, когда пользователь делает всё правильно, данные корректны, система работает без сбоев.",
          "incorrect": "Правильно! Happy Path - это идеальный сценарий, когда пользователь делает всё правильно, данные корректны, система работает без сбоев."
        },
        {
          "correct": "Неверно. Это не методология, а описание одного из типов сценариев использования.",
          "incorrect": "Неверно. Это не методология, а описание одного из типов сценариев использования."
        },
        {
          "correct": "Неверно. Happy Path не обязательно самый быстрый, это просто сценарий без ошибок и исключений.",
          "incorrect": "Неверно. Happy Path не обязательно самый быстрый, это просто сценарий без ошибок и исключений."
        }
      ]
    },
    {
      "id": "1.1.0.2.2",
      "question": "Почему разработчики обычно плохо тестируют свой собственный код?",
      "options": [
        {"text": "Они недостаточно квалифицированы в тестировании"},
        {"text": "У них нет времени на тестирование"},
        {"text": "Эффект создателя - они подсознательно знают 'правильный' способ использования"},
        {"text": "Они не хотят находить баги в своей работе"}
      ],
      "correctAnswer": 2,
      "explanations": [
        {
          "correct": "Неверно. Дело не в квалификации, а в психологических особенностях восприятия своего кода.",
          "incorrect": "Неверно. Дело не в квалификации, а в психологических особенностях восприятия своего кода."
        },
        {
          "correct": "Неверно. Хотя время может быть фактором, основная причина психологическая, а не организационная.",
          "incorrect": "Неверно. Хотя время может быть фактором, основная причина психологическая, а не организационная."
        },
        {
          "correct": "Правильно! Создатель подсознательно использует свой продукт 'правильно', ему сложно представить нестандартные сценарии.",
          "incorrect": "Правильно! Создатель подсознательно использует свой продукт 'правильно', ему сложно представить нестандартные сценарии."
        },
        {
          "correct": "Неверно. Большинство разработчиков хотят создавать качественный код, дело в психологических ограничениях.",
          "incorrect": "Неверно. Большинство разработчиков хотят создавать качественный код, дело в психологических ограничениях."
        }
      ]
    },
    {
      "id": "1.1.0.2.3",
      "question": "Что НЕ является типичной слепой зоной разработчиков?",
      "options": [
        {"text": "Граничные значения входных данных"},
        {"text": "Конкурентный доступ нескольких пользователей"},
        {"text": "Архитектура и структура кода"},
        {"text": "Нестандартная последовательность действий"}
      ],
      "correctAnswer": 2,
      "explanations": [
        {
          "correct": "Неверно. Граничные значения - классическая слепая зона, разработчики часто думают только о 'нормальных' данных.",
          "incorrect": "Неверно. Граничные значения - классическая слепая зона, разработчики часто думают только о 'нормальных' данных."
        },
        {
          "correct": "Неверно. Конкурентность - частая проблема, разработчики обычно думают об одном пользователе.",
          "incorrect": "Неверно. Конкурентность - частая проблема, разработчики обычно думают об одном пользователе."
        },
        {
          "correct": "Правильно! Архитектура - это как раз сильная сторона разработчиков, они видят общую структуру системы.",
          "incorrect": "Правильно! Архитектура - это как раз сильная сторона разработчиков, они видят общую структуру системы."
        },
        {
          "correct": "Неверно. Разработчики обычно предполагают 'правильную' последовательность действий пользователя.",
          "incorrect": "Неверно. Разработчики обычно предполагают 'правильную' последовательность действий пользователя."
        }
      ]
    },
    {
      "id": "1.1.0.2.4",
      "question": "Какой тип мышления характерен для тестировщика?",
      "options": [
        {"text": "Конвергентное - фокус на одном правильном решении"},
        {"text": "Дивергентное - рассмотрение всех возможных вариантов"},
        {"text": "Линейное - последовательное выполнение шагов"},
        {"text": "Абстрактное - работа с теоретическими концепциями"}
      ],
      "correctAnswer": 1,
      "explanations": [
        {
          "correct": "Неверно. Конвергентное мышление характерно для разработчиков - они ищут одно работающее решение.",
          "incorrect": "Неверно. Конвергентное мышление характерно для разработчиков - они ищут одно работающее решение."
        },
        {
          "correct": "Правильно! Тестировщик думает дивергентно - рассматривает множество сценариев, включая маловероятные.",
          "incorrect": "Правильно! Тестировщик думает дивергентно - рассматривает множество сценариев, включая маловероятные."
        },
        {
          "correct": "Неверно. Хотя тестировщики работают с тест-кейсами последовательно, их мышление не линейно.",
          "incorrect": "Неверно. Хотя тестировщики работают с тест-кейсами последовательно, их мышление не линейно."
        },
        {
          "correct": "Неверно. Тестировщики работают с конкретными сценариями, а не абстрактными концепциями.",
          "incorrect": "Неверно. Тестировщики работают с конкретными сценариями, а не абстрактными концепциями."
        }
      ]
    },
    {
      "id": "1.1.0.2.5",
      "question": "Что означает 'деструктивное мышление' в контексте тестирования?",
      "options": [
        {"text": "Негативное отношение к работе разработчиков"},
        {"text": "Стремление уничтожить продукт"},
        {"text": "Конструктивный поиск способов сломать систему для её улучшения"},
        {"text": "Пессимистичный взгляд на качество кода"}
      ],
      "correctAnswer": 2,
      "explanations": [
        {
          "correct": "Неверно. Деструктивное мышление не означает негативное отношение к коллегам.",
          "incorrect": "Неверно. Деструктивное мышление не означает негативное отношение к коллегам."
        },
        {
          "correct": "Неверно. Цель не уничтожить, а найти слабые места для последующего укрепления.",
          "incorrect": "Неверно. Цель не уничтожить, а найти слабые места для последующего укрепления."
        },
        {
          "correct": "Правильно! Деструктивное мышление - это поиск способов сломать систему, чтобы сделать её надёжнее.",
          "incorrect": "Правильно! Деструктивное мышление - это поиск способов сломать систему, чтобы сделать её надёжнее."
        },
        {
          "correct": "Неверно. Это не пессимизм, а методичный поиск потенциальных проблем.",
          "incorrect": "Неверно. Это не пессимизм, а методичный поиск потенциальных проблем."
        }
      ]
    },
    {
      "id": "1.1.0.2.6",
      "question": "Что такое 'Edge Case' (граничный случай)?",
      "options": [
        {"text": "Самый частый сценарий использования"},
        {"text": "Ситуация на границе допустимых значений или редкий сценарий"},
        {"text": "Случай, когда система точно сломается"},
        {"text": "Тест-кейс с максимальным приоритетом"}
      ],
      "correctAnswer": 1,
      "explanations": [
        {
          "correct": "Неверно. Частые сценарии - это обычные кейсы, не граничные.",
          "incorrect": "Неверно. Частые сценарии - это обычные кейсы, не граничные."
        },
        {
          "correct": "Правильно! Edge case - это ситуация на границе допустимых значений (например, максимальная длина строки) или редкий сценарий.",
          "incorrect": "Правильно! Edge case - это ситуация на границе допустимых значений (например, максимальная длина строки) или редкий сценарий."
        },
        {
          "correct": "Неверно. Граничный случай может работать корректно, важно это проверить.",
          "incorrect": "Неверно. Граничный случай может работать корректно, важно это проверить."
        },
        {
          "correct": "Неверно. Приоритет зависит от риска и вероятности, не все edge cases критичны.",
          "incorrect": "Неверно. Приоритет зависит от риска и вероятности, не все edge cases критичны."
        }
      ]
    },
    {
      "id": "1.1.0.2.7",
      "question": "Какой подход даёт лучшие результаты в разработке качественного продукта?",
      "options": [
        {"text": "Тестировщики проверяют уже готовый код"},
        {"text": "Разработчики сами полностью тестируют свой код"},
        {"text": "Раннее вовлечение тестировщиков и совместная ответственность за качество"},
        {"text": "Отдельная команда QA работает независимо от разработки"}
      ],
      "correctAnswer": 2,
      "explanations": [
        {
          "correct": "Неверно. Тестирование готового кода - это поздно и дорого, многие проблемы можно предотвратить раньше.",
          "incorrect": "Неверно. Тестирование готового кода - это поздно и дорого, многие проблемы можно предотвратить раньше."
        },
        {
          "correct": "Неверно. Мы выяснили, что разработчики имеют слепые зоны при тестировании своего кода.",
          "incorrect": "Неверно. Мы выяснили, что разработчики имеют слепые зоны при тестировании своего кода."
        },
        {
          "correct": "Правильно! Лучшие результаты достигаются при раннем вовлечении QA и общей ответственности команды за качество.",
          "incorrect": "Правильно! Лучшие результаты достигаются при раннем вовлечении QA и общей ответственности команды за качество."
        },
        {
          "correct": "Неверно. Изолированная работа QA приводит к конфликтам и позднему обнаружению проблем.",
          "incorrect": "Неверно. Изолированная работа QA приводит к конфликтам и позднему обнаружению проблем."
        }
      ]
    }
  ]
}